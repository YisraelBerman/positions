pipeline {
    agent {
        label 'agent1'
    }

    environment {
        GITHUB_TOKEN = credentials('github-token')
        GITHUB_USER = credentials('github-user')      
        AWS_INSTANCE_ID = credentials('dev-instance-ID')
        SSH_KEY_CREDENTIALS = credentials('forssh')
        AWS_REGION = 'us-east-1' 
        AWS_ACCESS_KEY_ID = credentials('aws-access-key') // AWS Access Key from Jenkins Credentials
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key') // AWS Secret Key from Jenkins Credentials
    }




    stages { 

        stage('AWS CLI Setup') {
            steps {
                script {
                    // Check if unzip is installed, and install it if not
                    def unzipInstalled = sh(script: 'which unzip', returnStatus: true)
                    if (unzipInstalled != 0) {
                        sh 'apt-get update && apt-get install -y unzip'
                    }

                    // Check if AWS CLI is installed
                    def awsCliInstalled = sh(script: 'which aws', returnStatus: true)
                    
                    // Install AWS CLI if not installed
                    if (awsCliInstalled != 0) {
                        sh '''
                            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                            unzip awscliv2.zip
                            ./aws/install
                        '''
                    }
                    
                    // Configure AWS CLI with the provided credentials
                    sh '''
                        aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
                        aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
                        aws configure set region ${AWS_REGION}
                    '''
                }
            }
        } //AWS CLI Setup

        stage('Check EC2 Instance State') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'dev-instance-ID', variable: 'INSTANCE_ID')]) {
                        // Check instance state and set environment variable
                        env.INSTANCE_STATE = sh(script: '''
                            aws ec2 describe-instances --instance-ids ${INSTANCE_ID} \
                            --query 'Reservations[*].Instances[*].State.Name' --output text --region ${AWS_REGION}
                        ''', returnStdout: true).trim()
                        echo "Instance state: ${env.INSTANCE_STATE}"

                        // Retrieve and set the instance public IP
                        env.AWS_APPS_IP = sh(script: '''
                            aws ec2 describe-instances --instance-ids ${INSTANCE_ID} \
                            --query 'Reservations[*].Instances[*].PublicIpAddress' --output text --region ${AWS_REGION}
                        ''', returnStdout: true).trim()
                        env.SSH_TARGET = "ubuntu@${env.AWS_APPS_IP}"
                        echo "Instance public IP: ${env.AWS_APPS_IP}"
                    }
                }
            }
        }// Check EC2 Instance State

        stage('Start AWS EC2 Instance') {
            when {
                expression { return env.INSTANCE_STATE != 'running' }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'dev-instance-ID', variable: 'INSTANCE_ID')]) {
                        echo "Starting instance..."
                        sh '''
                            aws ec2 start-instances --instance-ids ${INSTANCE_ID} --region ${AWS_REGION}
                            aws ec2 wait instance-running --instance-ids ${INSTANCE_ID} --region ${AWS_REGION}
                        '''
                        echo "Instance is now running."

                        // Retrieve and set the public IP
                        env.AWS_APPS_IP = sh(script: '''
                            aws ec2 describe-instances --instance-ids ${INSTANCE_ID} \
                            --query 'Reservations[*].Instances[*].PublicIpAddress' --output text --region ${AWS_REGION}
                        ''', returnStdout: true).trim()
                        env.SSH_TARGET = "ubuntu@${env.AWS_APPS_IP}"
                        echo "Instance public IP: ${env.AWS_APPS_IP}"
                    }

                    // Wait for SSH to be available by testing an SSH connection in a loop
                    withCredentials([sshUserPrivateKey(credentialsId: 'forssh', keyFileVariable: 'SSH_KEY_PATH')]) {
                        timeout(time: 2, unit: 'MINUTES') {
                            waitUntil {
                                script {
                                    echo "Attempting SSH connection to ${env.SSH_TARGET}..."
                                    def sshReady = sh(script: "ssh -o BatchMode=yes -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i \"$SSH_KEY_PATH\" ${env.SSH_TARGET} 'echo SSH is ready'", returnStatus: true)
                                    
                                    if (sshReady == 0) {
                                        echo "SSH connection successful."
                                        return true
                                    } else {
                                        echo "SSH connection attempt failed. Retrying..."
                                        return false
                                    }
                                }
                            }
                        }

                        // Run on_start.sh after SSH is confirmed available
                        sh '''
                            ssh -o StrictHostKeyChecking=no -i "$SSH_KEY_PATH" ${SSH_TARGET} 'bash ~/on_start.sh'
                        '''
                    }            
                    
                }
            }
        } //Start AWS EC2 Instance       
        
        stage('Initialize') {
            steps {
                script {
                    // Fetch the full commit hash
                    env.GIT_COMMIT_HASH = sh(script: "git log -n 1 --pretty=format:'%H'", returnStdout: true).trim()
                    
                    // Extract the short commit hash
                    env.SHORT_COMMIT = env.GIT_COMMIT_HASH.substring(0, 7)
                    
                    // Get repository name from git remote URL
                    env.REPO_PATH = "ghcr.io/yisraelberman/positions"

                    // Define image names with repository path
                    def branchName = env.BRANCH_NAME.replaceAll('/', '-')
                    env.BACKEND_IMAGE = "${env.REPO_PATH}/backend:${branchName}-build-${BUILD_NUMBER}"
                    env.FRONTEND_IMAGE = "${env.REPO_PATH}/frontend:${branchName}-build-${BUILD_NUMBER}"
                    
                    
                    // Initialize flags
                    env.BUILD_BACKEND = 'false'
                    env.BUILD_FRONTEND = 'false'
                }
            }
        } // Initialize

        
        stage('Test') {
            steps {
                echo 'To be added someday.'
            }
        } // test
        stage('Check for Changes') {
            steps {
                script {
                    def backendChanges = sh(
                        script: 'git diff --name-only HEAD~1..HEAD | grep "app/backend/" || true',
                        returnStdout: true
                    ).trim()

                    def frontendChanges = sh(
                        script: 'git diff --name-only HEAD~1..HEAD | grep "app/frontend/" || true',
                        returnStdout: true
                    ).trim()

                    env.BACKEND_CHANGED = backendChanges ? 'true' : 'false'
                    env.FRONTEND_CHANGED = frontendChanges ? 'true' : 'false'

                    echo "Backend Changed: ${env.BACKEND_CHANGED}"
                    echo "Frontend Changed: ${env.FRONTEND_CHANGED}"
                }
            }
        } //Check for Changes
        stage('Build') {
            parallel {
                stage('Build Backend') {
                    when {
                        expression {
                            return env.BACKEND_CHANGED == 'true'
                        }
                    }
                    steps {
                        script {
                            echo 'Changes detected in the backend directory. Building backend image...'
                            sh "docker build -t ${env.BACKEND_IMAGE} -f ./app/backend/dockerfile ./app/backend"
                            env.BUILD_BACKEND = 'true' 
                        }
                    }
                } // Build Backend
                stage('Build Frontend') {
                    when {
                        expression {
                            return env.FRONTEND_CHANGED == 'true'
                        }
                    }
                    steps {
                        script {
                            echo 'Changes detected in the frontend directory. Building frontend image...'
                            sh "docker build --build-arg REACT_APP_BACKEND_URL=https://app.yisraelberman.com:5000 -t ${env.FRONTEND_IMAGE} -f ./app/frontend/dockerfile ./app/frontend"                            
                            env.BUILD_FRONTEND = 'true' 
                        }
                    }
                } // Build Frontend
            }
        } // Build

        stage('Docker Login') {
            when {
                expression { return env.BUILD_BACKEND == 'true' || env.BUILD_FRONTEND == 'true' }
            }
            steps {
                sh "echo ${env.GITHUB_TOKEN} | docker login ghcr.io -u ${env.GITHUB_USER} --password-stdin"
            }
        } // Docker Login

        stage('Push Images to GitHub') {
            parallel {
                stage('Push Backend Image') {
                    when {
                        expression { return env.BUILD_BACKEND == 'true' }
                    }
                    steps {
                        script {
                            echo 'Pushing backend image to GitHub...'
                            sh """
                                docker push ${env.BACKEND_IMAGE}
                            """
                        }
                    }
                }
                stage('Push Frontend Image') {
                    when {
                        expression { return env.BUILD_FRONTEND == 'true' }
                    }
                    steps {
                        script {
                            echo 'Pushing frontend image to GitHub...'
                            sh """
                                docker push ${env.FRONTEND_IMAGE}
                            """
                        }
                    }
                }
            }
        } // Push Images to GitHub

        // Stop and remove existing containers and Pull new images from the correct repositories and run them
        stage('Deploy') {
            when {
                expression { return env.BUILD_BACKEND == 'true' || env.BUILD_FRONTEND == 'true' }
            }
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'forssh', keyFileVariable: 'secret')]) {
                        withEnv(["SSH_KEY_PATH=$secret"]) {
                            
                            if (env.BUILD_BACKEND == 'true') {
                                echo "Deploying backend..."
                                sh '''
                                    ssh -o StrictHostKeyChecking=no -i "$SSH_KEY_PATH" ${SSH_TARGET} "
                                        sudo docker stop backend || true && sudo docker rm backend || true && \
                                        sudo docker pull ${BACKEND_IMAGE} && \
                                        sudo docker run -d --name backend -p 5000:5000 \
                                        -e FLASK_ENV=production \
                                        -e CORS_ORIGIN=https://app.yisraelberman.com \
                                        -v /etc/letsencrypt/live/app.yisraelberman.com/fullchain.pem:/etc/letsencrypt/live/app.yisraelberman.com/fullchain.pem:ro \
                                        -v /etc/letsencrypt/live/app.yisraelberman.com/privkey.pem:/etc/letsencrypt/live/app.yisraelberman.com/privkey.pem:ro \
                                        ${BACKEND_IMAGE}
                                    "
                                '''
                            }

                            if (env.BUILD_FRONTEND == 'true') {
                                echo "Deploying frontend..."
                                sh '''
                                    ssh -o StrictHostKeyChecking=no -i "$SSH_KEY_PATH" ${SSH_TARGET} "
                                        sudo docker stop frontend || true && sudo docker rm frontend || true && \
                                        sudo docker pull ${FRONTEND_IMAGE} && \
                                        sudo docker run -d --name frontend -p 443:3002 \
                                        -e REACT_APP_BACKEND_URL=https://app.yisraelberman.com:5000 \
                                        -v /etc/letsencrypt/live/app.yisraelberman.com/fullchain.pem:/etc/letsencrypt/live/app.yisraelberman.com/fullchain.pem:ro \
                                        -v /etc/letsencrypt/live/app.yisraelberman.com/privkey.pem:/etc/letsencrypt/live/app.yisraelberman.com/privkey.pem:ro \
                                        ${FRONTEND_IMAGE}
                                    "
                                '''
                            }
                        }
                    }
                }
            }
        } // Deploy

    } //stages

    post {
        always {
            // Clean up the workspace
            cleanWs()
        }
    }
}
